/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/
options {
    static = false;
}
	PARSER_BEGIN(Compilador)

package tree;
import java.io.*;
import java.io.FileNotFoundException;
	public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCompiladorState jjtree = new JJTCompiladorState();

/*@egen*/
	    int contador_de_erro_lexico = 0;
	    public static void main(String[] args) throws FileNotFoundException{

			
	        Compilador parser = new Compilador( new FileInputStream("C:\\Users\\USER\\Desktop\\programas_comp\\arquivo.txt")); // abre arquivo a ser analisado
	        try {  // cria AS
	            parser.start();   // chama o m\u00e9todo que faz a an\u00e1lise
	        }
	        catch (ParseException e) {
	         	e.printStackTrace();
	         }
	         finally {
	           System.out.println("deu certo");
	            
	         } 
	    }


	}
	PARSER_END(Compilador)

	SKIP :
	{
			" "
		|	"\t"
		|	"\n"
		|	"\r"
		|	<"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")				>
		|	<"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/"	>
		|	"#" 	: PREPROCESSOR_OUTPUT
	}

	<PREPROCESSOR_OUTPUT> SKIP:
	{
	    "\n" : DEFAULT
	}


	TOKEN : /* PALAVRAS RESERVADAS */
	{
			< MAIN 		: "main" 	>
		|	< IF 		: "if" 		>
		| 	< ELSE 		: "else" 	>
		| 	< FOR	    : "for" 	>
		|   < RETURN    : "return"  >
	    |   < INT       : "int"     >
		|   < CHAR      : "char"    >
	    |   < FLOAT     : "float"   >
	    | 	< DOUBLE    : "double"  >
	    |   < VOID      : "void"    >
	    |   < WHILE     : "while"   >

	}

	TOKEN : /* OPERADORES NUM\u00c9RICOS */
	{
		    < AS        : "="   >
		|   < PLUS      : "+"   >
		|   < MINUS     : "-"   >
		|   < MULT      : "*"   >
		|   < DIV       : "/"   >
		|   < REM       : "%"   >
	}

	TOKEN : { /*OPERADORES L\u00d3GICOS*/

		  	< GT        : ">"   >
		|   < LT        : "<"   >
		|   < EQ        : "=="  >
		|   < LE        : "<="  >
		|   < GE        : ">="  >
		|   < NEQ       : "!="  >
		|   < AND       : "&&"  >
		|   < OR        : "||"  >
	}

	TOKEN : /*S\u00cdMBOLOS ESPECIAIS*/
	{
	        < LPAREN    : "("   >
	    |   < RPAREN    : ")"   >
	    |   < LBRACE    : "{"   >
	    |   < RBRACE    : "}"   >
	    |   < LBRACKET  : "["   >
	    |   < RBRACKET  : "]"   >
	    |   < SEMICOLON : ";"   >
	    |   < COMMA     : ","   >
	    |   < DOT       : "."   >
	}

	TOKEN : /*CONSTANTES*/
	{
	        < int_constant      :   (  // n\u00fameros decimais, octais, hexadecimais ou bin\u00e1rios
	                                (["0"-"9"] (["0"-"9"])* )
	                            |   (["0"-"7"] (["0"-"7"])* ["o", "O"] )
	                            |   (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] )
	                            |   (["0"-"1"] (["0"-"1"])* ["b", "B"])
	                                ) >
	        |
	        < string_constant   :  "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\""   >
	        |
	        < null_constant     :   "null" >
	}


	TOKEN : /*IDENTIFICADORES*/
	{
			<IDENT  		: <LETTER> (<LETTER> | <DIGIT> | "_" )*	>
		|	<#LETTER		: ["A"-"Z","a"-"z"]		        	>
		|	<#DIGIT			: ["0"-"9"]							>
	}


	void start():{/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) start */
              try {
/*@egen*/
	      <MAIN> [comand_block()]/*@bgen(jjtree)*/
              } catch (Throwable jjte000) {
                if (jjtc000) {
                  jjtree.clearNodeScope(jjtn000);
                  jjtc000 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                  throw (RuntimeException)jjte000;
                }
                if (jjte000 instanceof ParseException) {
                  throw (ParseException)jjte000;
                }
                throw (Error)jjte000;
              } finally {
                if (jjtc000) {
                  jjtree.closeNodeScope(jjtn000, true);
                }
              }
/*@egen*/
	}

	void comand_block():{/*@bgen(jjtree) comand_block */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMAND_BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) comand_block */
            try {
/*@egen*/
	    <LBRACE>(comand_line())*<RBRACE>/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void comand_line():{/*@bgen(jjtree) comand_line */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMAND_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) comand_line */
            try {
/*@egen*/
	    ((LOOKAHEAD(2) exp_log() | (LOOKAHEAD(2) exp_num() | assignment_var()))
	   				  |for_declaration()
	   				  |if_declaration()
	   				  |(LOOKAHEAD(3)func()
	   				  | var_declaration())
	   				  |  while_declaration()
	   				  )<SEMICOLON>/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/  
	}


	void type(): {/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) type */
                try {
/*@egen*/
		(<VOID> |  <INT> | <CHAR> | <FLOAT> | <DOUBLE>)/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	  }

	void log_op(): {/*@bgen(jjtree) log_op */
  SimpleNode jjtn000 = new SimpleNode(JJTLOG_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) log_op */
                try {
/*@egen*/
		(<OR> | <AND> | <NEQ>| <GE> | <LE> | <EQ>| <LT>  | <GT> )/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
	void var_declaration(): {/*@bgen(jjtree) var_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) var_declaration */
          try {
/*@egen*/
	  (LOOKAHEAD(2)(type() < IDENT >) |(type() assignment_var()))/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
		
	}
	void exp_log(): {/*@bgen(jjtree) exp_log */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP_LOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) exp_log */
            try {
/*@egen*/
	    (<IDENT> | <int_constant>)log_op()(<IDENT> | <int_constant>)/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void num_op(): {/*@bgen(jjtree) num_op */
  SimpleNode jjtn000 = new SimpleNode(JJTNUM_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) num_op */
                try {
/*@egen*/
		(<PLUS> | <MINUS> | <MULT> | <DIV> | <REM> )/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	} 

	void exp_num() : {/*@bgen(jjtree) exp_num */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP_NUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) exp_num */
            try {
/*@egen*/
	    (<IDENT> | <int_constant>) num_op() (<IDENT> | <int_constant>)/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void for_declaration():{/*@bgen(jjtree) for_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) for_declaration */
            try {
/*@egen*/
	    <FOR><LPAREN>assignment_var()<SEMICOLON>exp_log()<SEMICOLON>op_in_the_same_var()<RPAREN>comand_block()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void op_in_the_same_var(): {/*@bgen(jjtree) op_in_the_same_var */
  SimpleNode jjtn000 = new SimpleNode(JJTOP_IN_THE_SAME_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) op_in_the_same_var */
            try {
/*@egen*/
	    <IDENT>(<PLUS><PLUS> | <MINUS><MINUS> | <MULT><MULT> | <DIV><DIV> | <REM><REM> )/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void assignment_var():{/*@bgen(jjtree) assignment_var */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) assignment_var */
           try {
/*@egen*/

	   <IDENT> <AS> ((LOOKAHEAD(2) <int_constant> | (LOOKAHEAD(2) exp_num() | exp_log())))+/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
	}

	void if_declaration(): {/*@bgen(jjtree) if_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) if_declaration */
            try {
/*@egen*/
	    <IF><LPAREN>( LOOKAHEAD(2) exp_num()| exp_log())<RPAREN>comand_block() [else_declaration()]/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void else_declaration() : {/*@bgen(jjtree) else_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) else_declaration */
            try {
/*@egen*/
	    <ELSE> comand_block()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void func_name() :{/*@bgen(jjtree) func_name */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) func_name */
            try {
/*@egen*/
	    (<VOID> |  <INT> | <CHAR> | <FLOAT> | <DOUBLE>) <IDENT> param_list()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void param_list() :{/*@bgen(jjtree) param_list */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) param_list */
           try {
/*@egen*/
	   LOOKAHEAD(2) <LPAREN>(<VOID> |  <INT> | <CHAR> | <FLOAT> | <DOUBLE>)<IDENT><RPAREN>  |
	     <LPAREN>((<VOID> |  <INT> | <CHAR> | <FLOAT> | <DOUBLE>)<IDENT><COMMA>)+<RPAREN>/*@bgen(jjtree)*/
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
	}

	void func():{/*@bgen(jjtree) func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) func */
            try {
/*@egen*/
	    func_name() comand_block_func()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/
	}

	void comand_block_func(): {/*@bgen(jjtree) comand_block_func */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMAND_BLOCK_FUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) comand_block_func */
                try {
/*@egen*/
		comand_block() return_declaration()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void return_declaration(): {/*@bgen(jjtree) return_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) return_declaration */
          try {
/*@egen*/

	  < RETURN > (<int_constant> | < IDENT >)/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/		
	}

	void while_declaration(): {/*@bgen(jjtree) while_declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) while_declaration */
        try {
/*@egen*/
	<WHILE> <LPAREN>( LOOKAHEAD(2) exp_num()| exp_log())<RPAREN>comand_block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	}


